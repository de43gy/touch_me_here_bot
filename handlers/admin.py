from aiogram import types, Router, F
from aiogram.filters import Command
import aiosqlite
from config import DATABASE_PATH, ADMIN_ID
import logging
from utils import normalize_time_format

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("clear_db"))
async def cmd_clear_db(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) "
                       f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /clear_db –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute("DELETE FROM slots")
            
            await db.execute("DELETE FROM sqlite_sequence WHERE name='slots'")
            
            await db.commit()
            
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! –í—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂ —É–¥–∞–ª–µ–Ω—ã.")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} (ID: {message.from_user.id}) –æ—á–∏—Å—Ç–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            users_count = await cursor.fetchone()
            
            cursor = await db.execute("SELECT COUNT(*) FROM slots")
            slots_count = await cursor.fetchone()
            
            cursor = await db.execute("SELECT COUNT(*) FROM slots WHERE receiver_id IS NOT NULL")
            booked_slots = await cursor.fetchone()
            
            cursor = await db.execute("SELECT COUNT(*) FROM slots WHERE receiver_id IS NULL")
            available_slots = await cursor.fetchone()
            
            stats_message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count[0]}\n"
                f"üóì –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {slots_count[0]}\n"
                f"‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {booked_slots[0]}\n"
                f"‚è≥ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots[0]}\n"
            )
            
            await message.answer(stats_message)
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@router.message(Command("extended_stats"))
async def cmd_extended_stats(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute(
                """
                SELECT 
                    COUNT(*) as total_slots,
                    SUM(CASE WHEN receiver_id IS NOT NULL THEN 1 ELSE 0 END) as booked_slots,
                    COUNT(DISTINCT giver_id) as unique_givers,
                    COUNT(DISTINCT receiver_id) as unique_receivers
                FROM slots
                WHERE status = 'active'
                """
            )
            overall_stats = await cursor.fetchone()
            
            cursor = await db.execute(
                """
                SELECT 
                    day,
                    COUNT(*) as total_slots,
                    SUM(CASE WHEN receiver_id IS NOT NULL THEN 1 ELSE 0 END) as booked_slots,
                    COUNT(DISTINCT giver_id) as unique_givers,
                    COUNT(DISTINCT receiver_id) as unique_receivers
                FROM slots
                WHERE status = 'active'
                GROUP BY day
                ORDER BY day
                """
            )
            daily_stats = await cursor.fetchall()
            
            stats_message = (
                f"üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                f"<b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
                f"üî∂ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–∞–∂–∞: {overall_stats[0]}\n"
                f"üî∑ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏: {overall_stats[1]}\n"
                f"üî∏ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ä–∏—Ç–µ–ª–µ–π: {overall_stats[2]}\n"
                f"üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {overall_stats[3]}\n\n"
                f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú:</b>\n"
            )
            
            for day_stat in daily_stats:
                day, total, booked, givers, receivers = day_stat
                stats_message += (
                    f"\n<b>{day}</b>\n"
                    f"- –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total}\n"
                    f"- –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booked}\n"
                    f"- –°–≤–æ–±–æ–¥–Ω–æ: {total - booked}\n"
                    f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ä–∏—Ç–µ–ª–µ–π: {givers}\n"
                    f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {receivers}\n"
                )
            
            await message.answer(stats_message, parse_mode="HTML")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@router.message(Command("hourly_stats"))
async def cmd_hourly_stats(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute(
                """
                SELECT 
                    day,
                    time,
                    CASE WHEN receiver_id IS NULL THEN '—Å–≤–æ–±–æ–¥–µ–Ω' ELSE '–∑–∞–Ω—è—Ç' END as status,
                    COUNT(*) as count
                FROM slots
                WHERE status = 'active'
                GROUP BY day, time, CASE WHEN receiver_id IS NULL THEN '—Å–≤–æ–±–æ–¥–µ–Ω' ELSE '–∑–∞–Ω—è—Ç' END
                ORDER BY day, time
                """
            )
            time_stats = await cursor.fetchall()
            
            days_data = {}
            for row in time_stats:
                day, time_slot, slot_status, count = row
                if day not in days_data:
                    days_data[day] = []
                days_data[day].append((time_slot, slot_status, count))
            
            stats_message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º:</b>\n\n"
            
            for day, time_entries in days_data.items():
                stats_message += f"<b>{day}</b>\n"
                
                for time_entry in time_entries:
                    time_slot, slot_status, count = time_entry
                    time_display = normalize_time_format(time_slot)
                    status_emoji = "‚úÖ" if slot_status == "–∑–∞–Ω—è—Ç" else "‚è≥"
                    stats_message += f"{status_emoji} {time_display}: {count} —Å–ª–æ—Ç(–æ–≤) ({slot_status})\n"
                
                stats_message += "\n"
            
            max_message_length = 4096
            if len(stats_message) > max_message_length:
                chunks = [stats_message[i:i+max_message_length] for i in range(0, len(stats_message), max_message_length)]
                for chunk in chunks:
                    await message.answer(chunk, parse_mode="HTML")
            else:
                await message.answer(stats_message, parse_mode="HTML")
                
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Å–∞–º.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º: {e}")