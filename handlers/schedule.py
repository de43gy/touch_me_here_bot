from aiogram import types, Router, F
from aiogram.filters import Command
from keyboards import main_menu
from datetime import datetime
import logging
from utils import get_current_moscow_time, parse_slot_datetime

logger = logging.getLogger(__name__)

router = Router()

SCHEDULE_DATA = [
    {
        "date": "28 —Ñ–µ–≤—Ä–∞–ª—è",
        "events": [
            {"time": "16:00-17:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "17:00-19:00",
                "title": "@Nastya_avacada –º–∫-–º–∞—Å—Å–∞–∂ \"–ì—Ä–∞–Ω–∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: 1001 —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å –∫–æ—Ç–∏–∫–∞\"",
                "description": """–ü–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ —Ç–æ, –∫–∞–∫:
- –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫—É 
- –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
- –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º (–∫–æ—Ç–∏–∫–æ–º) –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç 
- –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç
- –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–µ
–ò –∫–æ–Ω–µ—á–Ω–æ –ø–æ–¥–µ–ª–∏–º—Å—è, —á—Ç–æ —Ö–æ—Ç–∏–º —É–Ω–µ—Å—Ç–∏ —Å–æ –≤—Å—Ç—Ä–µ—á–∏ —Å–µ–±–µ"""
            },
            {"time": "19:00", "title": "–ì–æ—Å—Ç–µ–≤–æ–π –º–∫-–º–∞—Å—Å–∞–∂ –∏–ª–∏ —á–∞–π", "description": ""},
            {"time": "20:00-21:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "21:00-23:00",
                "title": "–¢–∞–∫—Ç–∏–ª—å–Ω–æ-–∞—Ä–æ–º–æ –∏–º–º–µ—Ä—Å–∏–≤ \"–•–∏–∂–∏–Ω–∞ –≤–Ω—É—Ç—Ä—å\"",
                "description": "–ñ–∏–≤–∞—è –æ—á–µ—Ä–µ–¥—å"
            }
        ]
    },
    {
        "date": "01 –º–∞—Ä—Ç–∞",
        "events": [
            {"time": "12:00-13:00", "title": "–ì–æ—Å—Ç–µ–≤–æ–π –ú–∫ (–º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å)", "description": ""},
            {"time": "13:00-14:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "14:00-15:00",
                "title": "@AnnaVao –ú–∞—Å—Å–∞–∂ –Ω–æ–≥–∞–º–∏",
                "description": "–í–æ–∑—å–º–∏—Ç–µ —á–∏—Å—Ç—ã–µ –Ω–æ—Å–æ—á–∫–∏ –∏–ª–∏ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ, –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–µ –±–µ–¥–∞"
            },
            {"time": "15:00-16:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "16:00-17:00",
                "title": "@olga_aga –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ \"–ë–æ–ª—å—à–µ –õ—é–±–≤–∏\" ü§©",
                "description": """–≠—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ —Ç–æ–º, –∫–∞–∫ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º –º–æ–º–µ–Ω—Ç–µ –∏ –∑–∞–∑–µ–º–ª–∏—Ç—å—Å—è –≤ –Ω–µ–º. –ú—ã –±—É–¥–µ–º —Å–æ–ø—Ä–∏–∫–∞—Å–∞—Ç—å—Å—è —Å —á—É–≤—Å—Ç–≤–æ–º –ª—é–±–≤–∏, –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è, –∞ —Ç–∞–∫–∂–µ –æ–∫—Ä—É–∂–∞—Ç—å —Å–µ–±—è —ç—Ç–∏–º–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
–¢–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –Ω–∞ —ç—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –∫–∞–∫ —á—É–¥–µ—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—É–¥–µ—Ç –≤–∞–º –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ"""
            },
            {"time": "17:00-18:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "18:00-19:00",
                "title": "@vovachay \"–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ –∫–∏—Å—Ç–æ—á–∫–∞–º–∏\"",
                "description": ""
            },
            {
                "time": "19:00-21:00",
                "title": "\"–î—Ä—É–≥–æ–π –º–∞—Å—Å–∞–∂\" –æ—Ç –ê–ª–µ–∫—Å–µ—è –ê–ª—Ñ—ë—Ä–æ–≤–∞",
                "description": """–î–æ–ª–≥–æ –∏—Å–∫–∞–ª —Ç–µ—Ö–Ω–∏–∫—É, —Å–æ–µ–¥–∏–Ω—è—é—â—É—é –≤ —Å–µ–±–µ —Ç–∞–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –≥–ª—É–±–∏–Ω—É, –Ω–∞ –º–∫ —è –ø—Ä–∏–æ—Ç–∫—Ä–æ—é –¥–ª—è –≤–∞—Å —ç—Ç—É –¥–≤–µ—Ä—Ü—É 

–°–æ—á–µ—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π—Å–∫–æ–≥–æ –º–∞—Å—Å–∞–∂–∞ –ø–æ –ª–∏–Ω–∏–∏ –î–∂–∏–≤–∞–∫–∞ (–≤—Ä–∞—á —Å–µ–º—å–∏ –ë—É–¥–¥—ã –®–∞–∫—å—è–º—É–Ω–∏) –∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Å—Ç–µ–æ–ø–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—Å–∞–∂–∞"""
            },
            {
                "time": "23:00-01:00",
                "title": "–¢–∞–∫—Ç–∏–ª—å–Ω–æ-–∞—Ä–æ–º–æ –∏–º–º–µ—Ä—Å–∏–≤ \"–•–∏–∂–∏–Ω–∞ –≤–Ω—É—Ç—Ä—å\"",
                "description": "–ñ–∏–≤–∞—è –æ—á–µ—Ä–µ–¥—å"
            }
        ]
    },
    {
        "date": "02 –º–∞—Ä—Ç–∞",
        "events": [
            {"time": "12:00-13:00", "title": "–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è", "description": ""},
            {
                "time": "13:00-15:00",
                "title": "@Kristi_oleshko \"–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–æ–π–Ω–∏—á–µ–∫\"",
                "description": "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂ –≤ —Ç—Ä–æ–π–∫–∞—Ö"
            }
        ]
    }
]

def is_event_in_future(date_str, time_str):
    try:
        now = get_current_moscow_time()
        event_datetime = parse_slot_datetime(date_str, time_str)
        
        if not event_datetime:
            return False
            
        return event_datetime > now
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return True

@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–µ–º–ø–∞ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç¬ª")
async def show_schedule(message: types.Message):
    try:
        now = get_current_moscow_time()
        
        schedule_message = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–µ–º–ø–∞ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç¬ª</b>\n\n"
        has_future_events = False
        
        for day in SCHEDULE_DATA:
            date_str = day["date"]
            has_day_events = False
            day_message = f"<b>{date_str}</b>\n"
            
            for event in day["events"]:
                if is_event_in_future(date_str, event["time"]):
                    has_day_events = True
                    has_future_events = True
                    day_message += f"<b>{event['time']}</b>\n{event['title']}\n"
                    if event["description"]:
                        day_message += f"{event['description']}\n"
                    day_message += "\n"
            
            if has_day_events:
                schedule_message += day_message
        
        if not has_future_events:
            schedule_message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∏."
            
        await message.answer(schedule_message, parse_mode="HTML", reply_markup=main_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

@router.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    await show_schedule(message)