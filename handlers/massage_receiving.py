from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from keyboards import main_menu, reminder_menu
from database import get_available_slots, book_slot, get_slot_by_id
from utils import format_slot_info, is_slot_available
from datetime import datetime, timedelta
import asyncio
import logging

from aiogram import Bot
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)

class ReceiveMassage(StatesGroup):
    day = State()
    time = State()
    comment = State()

router = Router()

@router.message(F.text == "–Ø —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∞–∂")
async def show_available_slots(message: types.Message, state: FSMContext):
    slots = await get_available_slots()
    if not slots:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=main_menu)
        return

    user_id = message.from_user.id
    
    filtered_slots = []
    for slot in slots:
        if await is_slot_available(slot['day'], slot['time'], user_id):
            filtered_slots.append(slot)
    
    if not filtered_slots:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –≤—Ä–µ–º–µ–Ω–∞.", 
                             reply_markup=main_menu)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    days = sorted(list(set([slot['day'] for slot in filtered_slots])))

    for day in days:
        button = types.InlineKeyboardButton(text=day, callback_data=f"receive_day:{day}")
        markup.inline_keyboard.append([button])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)
    await state.set_state(ReceiveMassage.day)

@router.callback_query(ReceiveMassage.day)
async def process_day_selection(callback_query: types.CallbackQuery, state: FSMContext):
    day = callback_query.data.split(":")[1]
    await state.update_data(day=day)

    slots = await get_available_slots()
    day_slots = [slot for slot in slots if slot['day'] == day]
    
    user_id = callback_query.from_user.id
    
    filtered_slots = []
    for slot in day_slots:
        if await is_slot_available(slot['day'], slot['time'], user_id):
            filtered_slots.append(slot)
    
    if not filtered_slots:
        await callback_query.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–µ–Ω—å {day} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –¥–Ω—è.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_days")
            ]])
        )
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for slot in filtered_slots:
        slot_info = await format_slot_info(slot)
        button = types.InlineKeyboardButton(text=slot_info, callback_data=f"receive_time:{slot['id']}")
        markup.inline_keyboard.append([button])

    await callback_query.message.edit_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {day}:", reply_markup=markup)
    await state.set_state(ReceiveMassage.time)
    await callback_query.answer()

@router.callback_query(ReceiveMassage.day, F.data == "back_to_days")
async def back_to_days(callback_query: types.CallbackQuery, state: FSMContext):
    await show_available_slots(callback_query.message, state)
    await callback_query.answer()

@router.callback_query(ReceiveMassage.time)
async def process_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback_query.data.split(":")[1])
    await state.update_data(slot_id=slot_id)

    await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(ReceiveMassage.comment)
    await callback_query.answer()

@router.message(ReceiveMassage.comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text if message.text else ""
    data = await state.get_data()
    slot_id = data.get("slot_id")
    user_id = message.from_user.id

    slot = await get_slot_by_id(slot_id)
    if not slot:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª–æ—Ç –±—ã–ª –∑–∞–Ω—è—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω.", reply_markup=main_menu)
        await state.clear()
        return
        
    if slot['receiver_id'] is not None:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", reply_markup=main_menu)
        await state.clear()
        return
        
    if slot['giver_id'] == user_id:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –º–∞—Å—Å–∞–∂–∞.", reply_markup=main_menu)
        await state.clear()
        return
        
    if not await is_slot_available(slot['day'], slot['time'], user_id):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_menu
        )
        await state.clear()
        return

    await book_slot(slot_id, user_id, comment)
    await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Å–∞–∂!\n{await format_slot_info(slot)}", reply_markup=main_menu)
    
    giver_id = slot['giver_id']
    await bot.send_message(giver_id, f"–ö –≤–∞–º –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂!\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    
    await state.clear()

    day_number = slot['day'].split()[1].zfill(2)
    
    time_str = slot['time']
    if len(time_str) == 2:
        time_str = f"{time_str}:00"
        
    try:
        reminder_datetime = datetime.now().replace(
            hour=int(time_str.split(':')[0]),
            minute=int(time_str.split(':')[1]),
            second=0,
            microsecond=0
        )
        reminder_time = reminder_datetime - timedelta(minutes=30)
        
        delay = (reminder_time - datetime.now()).total_seconds()

        if delay > 0:
            asyncio.create_task(schedule_reminder(message.from_user.id, message.from_user.username, slot['day'], time_str, "receiver", delay))
        else:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} (ID: {message.from_user.id}), –≤—Ä–µ–º—è: {slot['day']} {time_str}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def schedule_reminder(user_id: int, username: str, day: str, time: str, role: str, delay: int):
    await asyncio.sleep(delay)
    if role == "giver":
        text = f"–Ø –ø–æ–º–Ω—é, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –¥–µ–ª–∞—é –º–∞—Å—Å–∞–∂ –≤ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç (–∫–æ—Ä–ø—É—Å , —ç—Ç–∞–∂)¬ª –∏ –ø—Ä–∏–¥—É –µ–≥–æ –¥–µ–ª–∞—Ç—å üëåüèª"
    elif role == "receiver":
        text = f"–Ø –ø–æ–º–Ω—é, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ–ª—É—á–∞—é –º–∞—Å—Å–∞–∂ –≤ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç (–∫–æ—Ä–ø—É—Å , —ç—Ç–∞–∂)¬ª –∏ –ø—Ä–∏–¥—É –µ–≥–æ –ø–æ–ª—É—á–∞—Ç—å üëåüèª"
    await bot.send_message(user_id, text, reply_markup=reminder_menu)