from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from keyboards import main_menu, reminder_menu
from database import add_slot
from utils import is_slot_available
from datetime import datetime, timedelta
import asyncio
import logging

from aiogram import Bot
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)

class GiveMassage(StatesGroup):
    day = State()
    time = State()
    comment = State()

router = Router()

@router.message(F.text == "–Ø —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂")
async def request_day(message: types.Message, state: FSMContext):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    days = ["–î–µ–Ω—å 1", "–î–µ–Ω—å 2", "–î–µ–Ω—å 3"]
    for day in days:
        button = types.InlineKeyboardButton(text=day, callback_data=f"give_day:{day}")
        markup.inline_keyboard.append([button])

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂:", reply_markup=markup)
    await state.set_state(GiveMassage.day)

@router.callback_query(GiveMassage.time, F.data.startswith("give_time:"))
async def process_time(callback_query: types.CallbackQuery, state: FSMContext):
    time = callback_query.data.split(":")[1]
    if ':' not in time:
        time = f"{time}:00"
    await state.update_data(time=time)
    await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –º–∞—Å—Å–∞–∂–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(GiveMassage.comment)

@router.callback_query(GiveMassage.time, F.data == "ignore")
async def process_time_ignore(callback_query: types.CallbackQuery):
    await callback_query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")

@router.message(GiveMassage.comment)
async def process_comment(message: types.Message, state: FSMContext):
    try:
        comment = message.text if message.text else ""
        data = await state.get_data()
        day = data.get("day")
        time = data.get("time")
        
        await add_slot(message.from_user.id, day, time, comment)
        await message.answer(
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞—Ä–µ–Ω–∏–µ –º–∞—Å—Å–∞–∂–∞:\n–î–µ–Ω—å: {day}\n–í—Ä–µ–º—è: {time}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}", 
            reply_markup=main_menu
        )
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            now = datetime.now()
            time_parts = time.split(':')
            reminder_datetime = now.replace(
                hour=int(time_parts[0]),
                minute=int(time_parts[1]),
                second=0,
                microsecond=0
            )
            
            reminder_time = reminder_datetime - timedelta(minutes=30)
            delay = (reminder_time - datetime.now()).total_seconds()

            if delay > 0:
                asyncio.create_task(
                    schedule_reminder(message.from_user.id, message.from_user.username, day, time, "giver", delay)
                )
            else:
                logger.warning(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} "
                    f"(ID: {message.from_user.id}), –≤—Ä–µ–º—è: {day} {time}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu
        )
    finally:
        await state.clear()

async def schedule_reminder(user_id: int, username: str, day: str, time: str, role: str, delay: int):
    await asyncio.sleep(delay)
    if role == "giver":
        text = f"–Ø –ø–æ–º–Ω—é, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –¥–µ–ª–∞—é –º–∞—Å—Å–∞–∂ –≤ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç (–∫–æ—Ä–ø—É—Å , —ç—Ç–∞–∂)¬ª –∏ –ø—Ä–∏–¥—É –µ–≥–æ –¥–µ–ª–∞—Ç—å üëåüèª"
    elif role == "receiver":
        text = f"–Ø –ø–æ–º–Ω—é, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ–ª—É—á–∞—é –º–∞—Å—Å–∞–∂ –≤ ¬´–¢—Ä–æ–≥–∞–π —Ç—É—Ç (–∫–æ—Ä–ø—É—Å , —ç—Ç–∞–∂)¬ª –∏ –ø—Ä–∏–¥—É –µ–≥–æ –ø–æ–ª—É—á–∞—Ç—å üëåüèª"
    await bot.send_message(user_id, text, reply_markup=reminder_menu)