from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from keyboards import main_menu
from database import get_user_slots, cancel_slot, get_slot_by_id
from utils import format_slot_info, is_cancellation_allowed, get_current_moscow_time, parse_slot_datetime
from datetime import datetime, timedelta
import logging
from aiogram import Bot
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)

class Cancel(StatesGroup):
    confirm_cancellation = State()

router = Router()

@router.message(F.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_user_slots(message: types.Message, state: FSMContext):
    user_slots = await get_user_slots(message.from_user.id)
    if not user_slots:
        await message.answer(
            "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", 
            reply_markup=main_menu,
            parse_mode="HTML"
        )
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    now = get_current_moscow_time()
    
    for slot in user_slots:
        slot_info = await format_slot_info(slot)
        slot_datetime = parse_slot_datetime(slot['day'], slot['time'])
            
        if slot_datetime and slot_datetime > now:
            button = types.InlineKeyboardButton(text=slot_info, callback_data=f"cancel:{slot['id']}")
            markup.inline_keyboard.append([button])
        else:
            button = types.InlineKeyboardButton(text=f"{slot_info} (–≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ –ø—Ä–æ—à–ª–æ)", callback_data="ignore")
            markup.inline_keyboard.append([button])

    if not markup.inline_keyboard:
        await message.answer(
            "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", 
            reply_markup=main_menu,
            parse_mode="HTML"
        )
        return

    await message.answer(
        "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë</i>", 
        reply_markup=markup,
        parse_mode="HTML"
    )
    await state.set_state(Cancel.confirm_cancellation)

@router.callback_query(Cancel.confirm_cancellation, F.data.startswith("cancel:"))
async def handle_cancel_slot(callback_query: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback_query.data.split(":")[1])
    slot = await get_slot_by_id(slot_id)

    if not slot:
        await callback_query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await state.clear()
        return

    confirm_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel:{slot_id}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_cancel")
        ]
    ])
    
    slot_info = await format_slot_info(slot)
    
    await callback_query.message.edit_text(
        f"<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
        f"{slot_info}",
        reply_markup=confirm_markup,
        parse_mode="HTML"
    )

@router.callback_query(Cancel.confirm_cancellation, F.data == "cancel_cancel")
async def handle_cancel_cancellation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üòä")
    await show_user_slots(callback_query.message, state)

@router.callback_query(Cancel.confirm_cancellation, F.data.startswith("confirm_cancel:"))
async def handle_confirm_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback_query.data.split(":")[1])
    slot = await get_slot_by_id(slot_id)

    if not slot:
        await callback_query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await state.clear()
        return

    if not await is_cancellation_allowed(slot):
        await callback_query.message.edit_text(
            "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]]),
            parse_mode="HTML"
        )
        await state.clear()
        return

    if callback_query.from_user.id == slot['giver_id']:
        canceled_by = 'giver'
        other_user_id = slot['receiver_id']
    else:
        canceled_by = 'receiver'
        other_user_id = slot['giver_id']

    await cancel_slot(slot_id, canceled_by)
    await callback_query.message.edit_text(
        "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
        "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]]),
        parse_mode="HTML"
    )
    
    if other_user_id:
        try:
            await bot.send_message(
                other_user_id,
                f"<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂ {slot['day']} –≤ {slot['time']} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ "
                f"{'–º–∞—Å—Å–∞–∂–∏—Å—Ç–æ–º' if canceled_by == 'giver' else '–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º'}.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")

    await state.clear()

@router.callback_query(Cancel.confirm_cancellation, F.data == "ignore")
async def handle_ignore(callback_query: types.CallbackQuery):
    await callback_query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ.")
    
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    
    await callback_query.message.answer(
        "<b>üìç –°–∞–ª—é—Ç 1 –∫–æ—Ä–ø—É—Å 3 —ç—Ç–∞–∂</b>\n\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        reply_markup=main_menu,
        parse_mode="HTML"
    )
    
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")